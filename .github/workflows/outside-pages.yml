# Simple workflow for deploying static content to GitHub Pages
name: Deploy static content to Pages

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["main"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  list:
    runs-on: ubuntu-latest
    outputs:
      token: ${{ steps.app-token.outputs.token }}
      app-slug:  ${{ steps.app-token.outputs.app-slug }}
      user-id:    ${{ steps.get-user-id.outputs.user-id }}
      repos: ${{ steps.list-repos.outputs.repos }}
    steps:
      - uses: actions/create-github-app-token@v1
        id: app-token
        with: 
          app-id: ${{ vars.APP_ID }}
          private-key: ${{ secrets.PRIVATE_KEY }}
          # optional: owner not needed IF the app has access to the repo running the workflow
          #   if you get 'RequestError [HttpError]: Not Found 404', pass in owner
          owner: ${{ github.repository_owner }}
      - name: Get GitHub App User ID
        id: get-user-id
        run: echo "user-id=$(gh api "/users/${{ steps.app-token.outputs.app-slug }}[bot]" | jq -r .id)" >> "$GITHUB_OUTPUT"
        env:
          GH_TOKEN: ${{ steps.app-token.outputs.token }}
      - name: List Repositories
        id: list-repos
        env:
          GH_TOKEN: ${{ steps.app-token.outputs.token }}
        run: |
          echo "repos=$(gh api /installation/repositories?per_page=100 \
          | jq -cr '[.repositories[].full_name]')" >> "$GITHUB_OUTPUT"
  deploy:
    needs: list
    strategy: 
      matrix:
        repo: ${{ fromJSON(needs.list.outputs.repos) }}
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/create-github-app-token@v1
        id: app-token
        with: 
          app-id: ${{ vars.APP_ID }}
          private-key: ${{ secrets.PRIVATE_KEY }}
          # optional: owner not needed IF the app has access to the repo running the workflow
          #   if you get 'RequestError [HttpError]: Not Found 404', pass in owner
          owner: ${{ github.repository_owner }}
      - name: Get GitHub App User ID
        id: get-user-id
        run: echo "user-id=$(gh api "/users/${{ steps.app-token.outputs.app-slug }}[bot]" | jq -r .id)" >> "$GITHUB_OUTPUT"
        env:
          GH_TOKEN: ${{ steps.app-token.outputs.token }}
      - name: Checkout
        uses: actions/checkout@v4
      - name: Process installed apps
        id: process
        env:
          repo: ${{ matrix.repo }}
          GH_TOKEN: ${{ steps.app-token.outputs.token }}
          SLUG: ${{ steps.app-token.outputs.app-slug }}
          ID: ${{ steps.get-user-id.outputs.user-id }}
          CONTEXT: ${{ toJSON(github.event) }}
        run: bash ${{ github.workspace }}/.github/workflows/build-page.sh
      - name: Upload artifact
        env:
          repo: ${{ matrix.repo }}
        id: upload
        uses: actions/upload-artifact@v4
        with:
          name: '${{ steps.process.outputs.name }}'
          path: ${{ runner.temp }}/${{ matrix.repo }}
      - uses: actions/github-script@v6
        id: script
        timeout-minutes: 10
        with:
          debug: true
          script: |
            const token = process.env['ACTIONS_RUNTIME_TOKEN']
            const runtimeUrl = process.env['ACTIONS_ID_TOKEN_REQUEST_URL']
            core.setOutput('TOKEN', token.trim())
            core.setOutput('IDTOKENURL', runtimeUrl.trim())
      - run: |
          IDTOKEN=$(curl -H "Authorization: bearer  ${{steps.script.outputs.TOKEN}}" ${{steps.script.outputs.IDTOKENURL}}  -H "Accept: application/json; api-version=2.0" -H "Content-Type: application/json" -d "{}" | jq -r '.value')
          echo $IDTOKEN
          jwtd() {
              if [[ -x $(command -v jq) ]]; then
                  jq -R 'split(".") | .[0],.[1] | @base64d | fromjson' <<< "${1}"
                  echo "Signature: $(echo "${1}" | awk -F'.' '{print $3}')"
              fi
          }
          jwtd $IDTOKEN
          echo "idToken=${IDTOKEN}" >> $GITHUB_OUTPUT
        id: tokenid
      - name: Deploy
        env:
          GH_TOKEN: ${{ steps.app-token.outputs.token }}
          ID_TOKEN: ${{ steps.tokenid.outputs.idToken }}
          repo: ${{ matrix.repo }}
          deploy_id: ${{ steps.process.outputs.id }}
          artifact_id: ${{ steps.upload.outputs.artifact-id }}
          artifact_url: ${{ steps.upload.outputs.artifact-url }}
        run: bash ${{ github.workspace }}/.github/workflows/deploy.sh
